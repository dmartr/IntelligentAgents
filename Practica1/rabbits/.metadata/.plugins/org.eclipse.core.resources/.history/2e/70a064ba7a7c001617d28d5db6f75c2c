import java.awt.Color;
import java.util.ArrayList;
import uchicago.src.sim.engine.BasicAction;
import uchicago.src.sim.engine.Schedule;
import uchicago.src.sim.engine.SimModelImpl;
import uchicago.src.sim.engine.SimInit;
import uchicago.src.sim.gui.DisplaySurface;
import uchicago.src.sim.gui.ColorMap;
import uchicago.src.sim.gui.Value2DDisplay;
import uchicago.src.sim.gui.Object2DDisplay;
import uchicago.src.sim.util.SimUtilities;
/**
 * Class that implements the simulation model for the rabbits grass
 * simulation.  This is the first class which needs to be setup in
 * order to run Repast simulation. It manages the entire RePast
 * environment and the simulation.
 *
 * @author 
 */


public class RabbitsGrassSimulationModel extends SimModelImpl {		
	
		// Default values
		private static final int XSIZE = 20;
		private static final int YSIZE = 20;
		private static final int NRABBITS = 10;
		private static final int BIRTHTHRESHOLD = 5;
		private static final int GRASSGROWTH = 5;
		private static final int MAXTIME = 5;
		
		private int xSize = XSIZE;
		private int ySize = YSIZE;
		private int nRabbits = NRABBITS;
		private int birthThreshold = BIRTHTHRESHOLD;
		private int grassGrowth = GRASSGROWTH;
		private int maxTime = MAXTIME;
		
		private Schedule schedule;

		private RabbitsGrassSimulationSpace rgSpace;
		private ArrayList agentList;
		private DisplaySurface displaySurf;

		public static void main(String[] args) {
			SimInit init = new SimInit();
		    RabbitsGrassSimulationModel model = new RabbitsGrassSimulationModel();
		    init.loadModel(model, "", false);
		}

		public void begin() {
			// TODO Auto-generated method stub
			  buildModel();
			  buildSchedule();
			  buildDisplay();
			  
			  displaySurf.display();
		}
		
		public void buildModel(){
			System.out.println("Building model");
			rgSpace = new RabbitsGrassSimulationSpace(xSize, ySize);
			for(int i = 0; i < nRabbits; i++){
			      addNewAgent();
			}
			for(int i = 0; i < agentList.size(); i++){
				RabbitsGrassSimulationAgent cda = (RabbitsGrassSimulationAgent)agentList.get(i);
			    cda.report();
			 }
		}
		
		public void buildSchedule(){
			System.out.println("Building schedule");

		    class RabbitsGrassSimulationStep extends BasicAction {
		      public void execute() {
		        SimUtilities.shuffle(agentList);
		        for(int i =0; i < agentList.size(); i++){
		          RabbitsGrassSimulationAgent cda = (RabbitsGrassSimulationAgent)agentList.get(i);
		          cda.step();
		        }
		      }
		    }

		    schedule.scheduleActionBeginning(0, new RabbitsGrassSimulationStep());
		    
		    class RabbitsGrassSimulationCountLiving extends BasicAction {
		        public void execute(){
		          countLivingAgents();
		        }
		      }

		      schedule.scheduleActionAtInterval(10, new RabbitsGrassSimulationCountLiving());
		}
		
		public void buildDisplay(){
			System.out.println("Building display");
		    ColorMap map = new ColorMap();

		    for(int i = 1; i<16; i++){
		    	map.mapColor(i, new Color((int)(i * 8 + 127), 0, 0));
		    }
		    map.mapColor(0, Color.white);

		    Value2DDisplay displayGrass = new Value2DDisplay(rgSpace.getCurrentGrassSpace(), map);

		    Object2DDisplay displayAgents = new Object2DDisplay(rgSpace.getCurrentAgentSpace());
		    displayAgents.setObjectList(agentList);
		    
		    displaySurf.addDisplayable(displayGrass, "Grass");
		    displaySurf.addDisplayable(displayAgents, "Agents");
		}
		
		public String[] getInitParam() {
			// TODO Auto-generated method stub
			String[] initParams = { "XSize", "YSize", "NRabbits", "BirthThreshold", "GrassGrowth", "MaxTime" };
		    return initParams;
		}

		public String getName() {
			// TODO Auto-generated method stub
			return "Rabbits Grass Simulation";
		}
		
		private void addNewAgent(){
		    RabbitsGrassSimulationAgent a = new RabbitsGrassSimulationAgent(maxTime);
		    agentList.add(a);
		    rgSpace.addAgent(a);
		}
		
		private int countLivingAgents(){
			    
			int livingAgents = 0;
			for(int i = 0; i < agentList.size(); i++){
				RabbitsGrassSimulationAgent cda = (CarryDropAgent)agentList.get(i);
				if(cda.getStepsToLive() > 0) livingAgents++;
			}
			System.out.println("Number of living agents is: " + livingAgents);
			return livingAgents;
			 
		}

		public Schedule getSchedule() {
			// TODO Auto-generated method stub
			return schedule;
		}

		public void setup() {
			// TODO Auto-generated method stub
			System.out.println("Setting up");	
			rgSpace = null;
			agentList = new ArrayList();
			schedule = new Schedule(1);
			if (displaySurf != null){
				displaySurf.dispose();
			}
			displaySurf = null;

			displaySurf = new DisplaySurface(this, "Rabbit Grass Simulation Model Window 1");

			registerDisplaySurface("Rabbit Grass Simulation Model Window 1", displaySurf);
		}
		
		public int getXSize() {
			return xSize;
		}
		
		public void setXSize(int x) {
			xSize = x;
		}
		
		public int getYSize() {
			return ySize;
		}
		
		public void setYSize(int y) {
			ySize = y;
		}
		
		public int getNRabbits(){
			return nRabbits;
		}
		
		public void setNRabbits(int rabbits) {
			nRabbits = rabbits;
		}
		
		public int getBirthThreshold() {
			return birthThreshold;
		}
		
		public void setBirthThreshold(int threshold) {
			birthThreshold = threshold;
		}
		
		public int getGrassGrowth() {
			return grassGrowth;
		}
		
		public void setGrassGrowth(int rate) {
			grassGrowth = rate;
		}
		
		public int getMaxTime() {
			return maxTime;
		}
		
		public void setMaxTime(int time) {
			maxTime = time;
		}
}
