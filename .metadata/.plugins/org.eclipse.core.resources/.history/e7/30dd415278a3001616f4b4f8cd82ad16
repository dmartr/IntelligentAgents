package template;

//the list of imports
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import logist.LogistSettings;

import logist.Measures;
import logist.behavior.AuctionBehavior;
import logist.behavior.CentralizedBehavior;
import logist.agent.Agent;
import logist.config.Parsers;
import logist.simulation.Vehicle;
import logist.plan.Plan;
import logist.task.Task;
import logist.task.TaskDistribution;
import logist.task.TaskSet;
import logist.topology.Topology;
import logist.topology.Topology.City;

/**
 * A very simple auction agent that assigns all tasks to its first vehicle and
 * handles them sequentially.
 *
 */
@SuppressWarnings("unused")
public class CentralizedTemplate implements CentralizedBehavior {

    private Topology topology;
    private TaskDistribution distribution;
    private Agent agent;
    private long timeout_setup;
    private long timeout_plan;
    
    @Override
    public void setup(Topology topology, TaskDistribution distribution,
            Agent agent) {
        
        // this code is used to get the timeouts
        LogistSettings ls = null;
        try {
            ls = Parsers.parseSettings("config/settings_default.xml");
        }
        catch (Exception exc) {
        	System.out.print(exc);
            System.out.println("There was a problem loading the configuration file.");
        }
        
        // the setup method cannot last more than timeout_setup milliseconds
        timeout_setup = ls.get(LogistSettings.TimeoutKey.SETUP);
        // the plan method cannot execute more than timeout_plan milliseconds
        timeout_plan = ls.get(LogistSettings.TimeoutKey.PLAN);
        
        this.topology = topology;
        this.distribution = distribution;
        this.agent = agent;
    }

    @Override
    public List<Plan> plan(List<Vehicle> vehicles, TaskSet tasks) {
        long time_start = System.currentTimeMillis();
        SLS sls = new SLS(vehicles, new ArrayList(tasks));
        CentralizedPlan selectedPlan = sls.selectInitialSolution();
        int MAX_ITERS = 3000;
        for (int i = 0; i<MAX_ITERS; i++) {
        	ArrayList<CentralizedPlan> neighbors = sls.chooseNeighbors(selectedPlan);
        	CentralizedPlan newPlan = sls.localChoice(selectedPlan, neighbors);
        	selectedPlan = newPlan;
        }
     
        List<Plan> plans = new ArrayList<Plan>();
        for (Vehicle v : vehicles) {

        	Plan vehiclePlan = centralizedPlan(v, selectedPlan.planTasks.get(v.id()));
    		plans.add(vehiclePlan);
        }
//		System.out.println("Agent " + agent.id() + " has tasks " + tasks);
        
        long time_end = System.currentTimeMillis();
        long duration = time_end - time_start;
        System.out.println("The plan was generated in "+duration+" milliseconds.");
        
        return plans;
    }

    private Plan centralizedPlan(Vehicle vehicle, LinkedList<CentralizedTask> tasks) {
        City current = vehicle.getCurrentCity();
        Plan plan = new Plan(current);

        for (CentralizedTask task : tasks) {
        	if (task.pickup) {
            // move: current city => pickup location
	            for (City city : current.pathTo(task.pickupCity)) {
	            	System.out.println("Move to " + city.id);
	                plan.appendMove(city);
	            }
	            System.out.println("Pick up in " + task.task.pickupCity.id);
	            plan.appendPickup(task.task);
	            current = task.pickupCity;
        	} else {
                // move: pickup location => delivery location
                for (City city : current.pathTo(task.deliveryCity)) {
	            	System.out.println("Move to " + city.id);
                    plan.appendMove(city);
                }
	            System.out.println("Pick up in " + task.task.pickupCity.id);
                plan.appendDelivery(task.task);
                current = task.deliveryCity;
        	}



            // set current city
            
        }
        return plan;
    }
}
