package template;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class BreadthFirstSearch {
	
	private Queue<DeliberativeState> toVisit = new LinkedList<DeliberativeState>();
	private List<DeliberativeState> visited = new ArrayList<DeliberativeState>();

	private DeliberativeState goal;
	
	public DeliberativeState search(DeliberativeState initialState) {
		toVisit.add(initialState);
		
		double bestBenefits = Double.NEGATIVE_INFINITY;


		while (!toVisit.isEmpty()){
			//System.out.println(toVisit.element());
			DeliberativeState currentState = toVisit.poll();
			//System.out.println(currentState.toPickupList.size() + " " +  currentState.toDeliverList.size());
			if (currentState.isGoal() && currentState.totalBenefits > bestBenefits) {
				goal = currentState;
				System.out.println("NEW GOOOOAL " + currentState.totalBenefits);
				bestBenefits = currentState.totalBenefits;
			} else {
				if (goal == null || currentState.getLevelOfDepth() <= goal.getLevelOfDepth()) {
					List<DeliberativeState> nextStates = currentState.getNextStates();
					visited.add(currentState);
					for (DeliberativeState state : nextStates) {
						if (!currentState.hasLoop()) {
							toVisit.add(state);
						}
					}
				} else {
					return goal;
				}
			}
			
		}
		
		return goal;
	}
}
