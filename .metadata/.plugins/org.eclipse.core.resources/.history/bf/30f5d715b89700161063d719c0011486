package template;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class BreadthFirstSearch {
	
	private Queue<DeliberativeState> toVisit = new LinkedList<DeliberativeState>();
	private List<DeliberativeState> visited = new ArrayList<DeliberativeState>();

	private DeliberativeState goal;
	
	public DeliberativeState search(DeliberativeState initialState) {
		toVisit.add(initialState);
		
		double bestBenefits = Double.NEGATIVE_INFINITY;
		double lastLevel = 0;
		while (!toVisit.isEmpty()){
			//System.out.println(toVisit.element());

			DeliberativeState currentState = toVisit.poll();
			if (currentState.isGoal() && currentState.totalBenefits > bestBenefits) {
				goal = currentState;
				System.out.println("NEW GOOOOAL " + currentState.totalBenefits);
				bestBenefits = currentState.totalBenefits;
			} else {
				System.out.println(currentState.getLevelOfDepth());
				if (goal == null || currentState.getLevelOfDepth() <= goal.getLevelOfDepth()) {
					if (currentState.totalBenefits + currentState.getMaxRewards() >= bestBenefits) {
						//System.out.println("I'm in " +  currentState.currentCity);
						List<DeliberativeState> nextStates = currentState.getNextStates();
						visited.add(currentState);
						for (DeliberativeState state : nextStates) {
							if (!currentState.hasLoop()) {
								//System.out.println("Next States " +  state.currentCity + " * " + toVisit.size() );
								toVisit.add(state);
								//System.out.println(toVisit.size());
							}
						}
					}
				} else {
					return goal;
				}
			}
			//if (goal != null) System.out.println(goal.actionHistory.size());
		}
		
		return goal;
	}
}
