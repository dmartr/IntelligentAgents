package template;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;

import logist.LogistSettings;

import logist.Measures;
import logist.behavior.AuctionBehavior;
import logist.behavior.CentralizedBehavior;
import logist.agent.Agent;
import logist.config.Parsers;
import logist.simulation.Vehicle;
import logist.plan.Plan;
import logist.task.Task;
import logist.task.TaskDistribution;
import logist.task.TaskSet;
import logist.topology.Topology;
import logist.topology.Topology.City;
public class SLS {
	
	public List<Vehicle> vehicles = new ArrayList<Vehicle>();
	public List<Task> tasks = new ArrayList<Task>();

	public SLS(List<Vehicle> vehicles, List<Task> tasks) {
		this.vehicles = vehicles;
		this.tasks = tasks;
	}
	
	public HashMap<Integer, LinkedList<CentralizedTask>> selectInitialSolution() {
		HashMap<Integer, LinkedList<CentralizedTask>> initialPlan = new HashMap<Integer, LinkedList<CentralizedTask>>();
		
		int maxCapacity = 0;
		Vehicle biggestVehicle = vehicles.get(0);
		for (Vehicle v : vehicles) {
			initialPlan.put(v.id(), new LinkedList<CentralizedTask>());
			if (v.capacity() > maxCapacity) {
				maxCapacity = v.capacity();
				biggestVehicle = v;
			}
		}
		
		for (Task task : tasks) {
			CentralizedTask pickupTask = new CentralizedTask("PICKUP", task);
			CentralizedTask deliveryTask = new CentralizedTask("DELIVERY", task);
			
			LinkedList<CentralizedTask> taskList = initialPlan.get(biggestVehicle.id());
			taskList.addLast(pickupTask);
			taskList.addLast(deliveryTask);
			initialPlan.put(biggestVehicle.id(), taskList);
		}
		return initialPlan;
		
	}
	
	public ArrayList<HashMap<Integer, LinkedList<CentralizedTask>>> chooseNeighbors(HashMap<Integer, LinkedList<CentralizedTask>> plan) {
		ArrayList<HashMap<Integer, LinkedList<CentralizedTask>>> neighbors = new ArrayList<HashMap<Integer, LinkedList<CentralizedTask>>>();
		
		
		
		
		return neighbors;
	}
	
	public boolean validConstraints(HashMap<Integer, LinkedList<CentralizedTask>> plan) {
		
		for (Integer i : plan.keySet()) {
			List<Integer> toPickup = new ArrayList<Integer>();
			List<Integer> toDeliver = new ArrayList<Integer>();
			
		}

	}

	

}
