package template;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

import logist.simulation.Vehicle;

public class CentralizedPlan {
	public HashMap<Integer, LinkedList<CentralizedTask>> planTasks;
	public int cost;
	
	public CentralizedPlan() {
		this.planTasks = new HashMap<Integer, LinkedList<CentralizedTask>>();
		this.cost = 0;
	}
	public CentralizedPlan(HashMap<Integer, LinkedList<CentralizedTask>> planTasks) {
		this.planTasks = planTasks;
		this.cost = planCost();
	}
	public CentralizedPlan(CentralizedPlan plan) {
		this.planTasks = plan.planTasks;
		this.cost = plan.cost;
	}
	
	public int planCost() {
		
	}
	
	public CentralizedTask nextTask(int vehicle) {
		return planTasks.get(vehicle).get(0);
	}
	
	public CentralizedTask nextTask(CentralizedTask task) {
		for (Integer i : planTasks.keySet()) {
			for (CentralizedTask t : planTasks.get(i)) {
				if (t.equals(task)) {
					int index = planTasks.get(i).indexOf(t);
					if (planTasks.get(i).size() <= index+1) {
						return null;
					} else {
						return planTasks.get(i).get(index+1);
					}
				}
			}
		}
		return null;
	}
	
	public CentralizedPlan changeVehicle(int initialVehicle, int finalVehicle) {
		CentralizedTask movedTask = planTasks.get(initialVehicle).pollFirst();
		planTasks.get(finalVehicle).addFirst(movedTask);
		return this;
	}
	public boolean validConstraints(List<Vehicle> vehicles) {
		for (Integer i : planTasks.keySet()) {
			int weights = 0;
			List<Integer> toPickup = new ArrayList<Integer>();
			for (CentralizedTask task : planTasks.get(i)) {
				if (task.pickup) {
					toPickup.add(task.task.id);
					weights += task.weight;
					if (weights > vehicles.get(i).capacity()) {
						return false;
					}
				} else {
					if (!toPickup.contains(task.task.id)) {
						return false;
					} else {
						toPickup.remove(task.task.id);
						weights -= task.weight;
					}
				}
			}
			if (toPickup.size() > 0) {
				return false;
			}
		}
		return true;

	}
}
