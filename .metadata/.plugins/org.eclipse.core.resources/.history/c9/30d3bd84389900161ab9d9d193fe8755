package template;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.TreeMap;
import java.util.List;
import java.util.Queue;

public class AStar {
	
	private Queue<DeliberativeState> toVisit = new LinkedList<DeliberativeState>();
	private Heuristic heuristic;
	
	public DeliberativeState search(DeliberativeState initialState) {
		toVisit.add(initialState);
		double bestBenefits = Double.NEGATIVE_INFINITY;

		while (true){
			DeliberativeState currentState = toVisit.poll();
			if (currentState.isGoal()) {
				return currentState;
			} else {
					if (!currentState.knownState()) {
						List<DeliberativeState> nextStates = currentState.getNextStates();
						for (DeliberativeState state : nextStates) {
							toVisit.add(state);
						}
					}
				} else {
					break;
				}
			}
			
		}
		System.out.println("BFS results: " + goal.actionHistory.size() + " actions with a total benefit of " + goal.totalBenefits);
		return goal;
	}
}
